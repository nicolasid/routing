<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>Routing Using Routific</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src="https://code.jquery.com/jquery-1.10.2.js"></script>
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.25.1/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.25.1/mapbox-gl.css' rel='stylesheet' />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
    <style>
        body { margin:0; padding:0; }
        #map { 
          position:absolute; top:45px; width:100%; height: 90%;
        }
        #menu {
            background: #fff;
            position: absolute;
            z-index: 1;
            top: 55px;
            right: 25px;
            border-radius: 3px;
            width: 100px;
            border: 1px solid rgba(0,0,0,0.4);
            font-family: 'Open Sans', sans-serif;
        }
        #menu a {
            font-size: 12px;
            color: #404040;
            display: block;
            margin: 0;
            padding: 0;
            padding: 8px;
            text-decoration: none;
            border-bottom: 1px solid rgba(0,0,0,0.25);
            text-align: center;
        }

        #menu a:last-child {
            border: none;
        }

        #menu a:hover {
            background-color: #f8f8f8;
            color: #404040;
        }

        #menu a.active {
            background-color: #3887be;
            color: #ffffff;
        }

        #menu a.active:hover {
            background: #3074a4;
        }

     .sk-circle {
      margin: 120px auto;
      width: 120px;
      height: 120px;
      position: relative; }
      .sk-circle .sk-child {
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0; }
      .sk-circle .sk-child:before {
        content: '';
        display: block;
        margin: 0 auto;
        width: 15%;
        height: 15%;
        background-color: #337ab7;
        border-radius: 100%;
        -webkit-animation: sk-circleBounceDelay 1.2s infinite ease-in-out both;
                animation: sk-circleBounceDelay 1.2s infinite ease-in-out both; }
      .sk-circle .sk-circle2 {
        -webkit-transform: rotate(30deg);
            -ms-transform: rotate(30deg);
                transform: rotate(30deg); }
      .sk-circle .sk-circle3 {
        -webkit-transform: rotate(60deg);
            -ms-transform: rotate(60deg);
                transform: rotate(60deg); }
      .sk-circle .sk-circle4 {
        -webkit-transform: rotate(90deg);
            -ms-transform: rotate(90deg);
                transform: rotate(90deg); }
      .sk-circle .sk-circle5 {
        -webkit-transform: rotate(120deg);
            -ms-transform: rotate(120deg);
                transform: rotate(120deg); }
      .sk-circle .sk-circle6 {
        -webkit-transform: rotate(150deg);
            -ms-transform: rotate(150deg);
                transform: rotate(150deg); }
      .sk-circle .sk-circle7 {
        -webkit-transform: rotate(180deg);
            -ms-transform: rotate(180deg);
                transform: rotate(180deg); }
      .sk-circle .sk-circle8 {
        -webkit-transform: rotate(210deg);
            -ms-transform: rotate(210deg);
                transform: rotate(210deg); }
      .sk-circle .sk-circle9 {
        -webkit-transform: rotate(240deg);
            -ms-transform: rotate(240deg);
                transform: rotate(240deg); }
      .sk-circle .sk-circle10 {
        -webkit-transform: rotate(270deg);
            -ms-transform: rotate(270deg);
                transform: rotate(270deg); }
      .sk-circle .sk-circle11 {
        -webkit-transform: rotate(300deg);
            -ms-transform: rotate(300deg);
                transform: rotate(300deg); }
      .sk-circle .sk-circle12 {
        -webkit-transform: rotate(330deg);
            -ms-transform: rotate(330deg);
                transform: rotate(330deg); }
      .sk-circle .sk-circle2:before {
        -webkit-animation-delay: -1.1s;
                animation-delay: -1.1s; }
      .sk-circle .sk-circle3:before {
        -webkit-animation-delay: -1s;
                animation-delay: -1s; }
      .sk-circle .sk-circle4:before {
        -webkit-animation-delay: -0.9s;
                animation-delay: -0.9s; }
      .sk-circle .sk-circle5:before {
        -webkit-animation-delay: -0.8s;
                animation-delay: -0.8s; }
      .sk-circle .sk-circle6:before {
        -webkit-animation-delay: -0.7s;
                animation-delay: -0.7s; }
      .sk-circle .sk-circle7:before {
        -webkit-animation-delay: -0.6s;
                animation-delay: -0.6s; }
      .sk-circle .sk-circle8:before {
        -webkit-animation-delay: -0.5s;
                animation-delay: -0.5s; }
      .sk-circle .sk-circle9:before {
        -webkit-animation-delay: -0.4s;
                animation-delay: -0.4s; }
      .sk-circle .sk-circle10:before {
        -webkit-animation-delay: -0.3s;
                animation-delay: -0.3s; }
      .sk-circle .sk-circle11:before {
        -webkit-animation-delay: -0.2s;
                animation-delay: -0.2s; }
      .sk-circle .sk-circle12:before {
        -webkit-animation-delay: -0.1s;
                animation-delay: -0.1s; }
    @-webkit-keyframes sk-circleBounceDelay {
      0%, 80%, 100% {
        -webkit-transform: scale(0);
                transform: scale(0); }
      40% {
        -webkit-transform: scale(1);
                transform: scale(1); } }
    @keyframes sk-circleBounceDelay {
      0%, 80%, 100% {
        -webkit-transform: scale(0);
                transform: scale(0); }
      40% {
        -webkit-transform: scale(1);
                transform: scale(1); } }

    </style>
</head>
<body>
    <form id="routeParam" class="form-inline" style="position:absolute; top:5px; left:20px;" action="/" method="post">
        <div class="form-group">
            <label for="inputsm" class="col-form-label-sm">Order Time</label>
        </div>
        <div class="form-group">
            <div class="col-xs-2">
                <input type="text" class="form-control input-sm" name="orderTime" placeholder="minutes">
            </div>
        </div>
        <div class="form-group">
            <div class="form-check">
                <label class="form-check-inline">
                    <input class="form-check-input" type="radio" name="traffic" value="fast" checked>
                    Fast
                </label>
                <label class="form-check-inline">
                    <input class="form-check-input" type="radio" name="traffic" value="slow">
                    Slow
                </label>
            </div>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary" id="findButton">Find Best Route</button>
        </div>
        <div class="form-group" id="outputMessage">
            <p class="form-control-static"> #outputDetail#</p>
        </div>
    </form>

<nav id="menu"></nav>
<div id='map'></div>
<div id='loading' class="sk-circle" style="display: none; top:30px;">
    <div class="sk-circle1 sk-child"></div>
    <div class="sk-circle2 sk-child"></div>
    <div class="sk-circle3 sk-child"></div>
    <div class="sk-circle4 sk-child"></div>
    <div class="sk-circle5 sk-child"></div>
    <div class="sk-circle6 sk-child"></div>
    <div class="sk-circle7 sk-child"></div>
    <div class="sk-circle8 sk-child"></div>
    <div class="sk-circle9 sk-child"></div>
    <div class="sk-circle10 sk-child"></div>
    <div class="sk-circle11 sk-child"></div>
    <div class="sk-circle12 sk-child"></div>
</div>
<script>

$( "#routeParam" ).submit(function() {
    $( "#menu" ).hide();
    $( "#map" ).hide();
    $( "#outputMessage" ).hide();
    $( "#loading" ).show();
    $( "findButton" ).prop("disabled", true);
});

mapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpbG10dnA3NzY3OTZ0dmtwejN2ZnUycjYifQ.1W5oTOnWXQ9R1w8u3Oo1yA';
var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v9',
    center: [103.810021,1.361409],
    zoom: 11
});

var routingOutput = #routingOutput#;

var routeLayerIds = [];
var pointLayerIds = [];
var colors = ['#1F77B4', '#FF7F0E', '#2CA02C', '#D62728', '#9467BD',
            '#8C564B', '#215AB7', '#7F7F7F', '#BCBD22', '#17BECF',
            'purple', 'blue', 'orange', 'green', 'yellow'];
map.on('load', function () {
    // iterate through the driver
    var idx = 0;
    for (driver in routingOutput['solution']) {
        // record the driver for defining layers
        routeLayerIds.push(driver);
        pointLayerIds.push(driver + "points");
        var coordinates = [];
        var features = [];
        if (routingOutput['solution'][driver].length <= 2) {
            var aFeature = {
                "type": "Feature",
                "geometry": {
                    "type": "Point",
                    "coordinates": routingOutput['solution'][driver][0]['geocode']
                },
                "properties": {
                    "description" : "<strong>Depot</strong><br/>Address : " + routingOutput['solution'][driver][0]['location_name'] + "<br/>Arrival Time : " + routingOutput['solution'][driver][0]['arrival_time'],
                    "title": 0,
                    "icon": "harbor"
                }
            };
            features.push(aFeature);
            coordinates.push(routingOutput['solution'][driver][0]['geocode']);
        } else {
            for (dest in routingOutput['solution'][driver]) {
                var description = "";
                if (routingOutput['solution'][driver][dest]['location_id'] == 'depot') {
                    description = "<strong>Depot</strong><br/>Address : " + routingOutput['solution'][driver][dest]['location_name'] + "<br/>Arrival Time : " + routingOutput['solution'][driver][dest]['arrival_time'] + "<br/>Fleet : " + driver;
                } else {
                    description = "Delivery Sequence# : " + dest + "<br/>Address : " + routingOutput['solution'][driver][dest]['location_name'] + "<br/>Arrival Time : " + routingOutput['solution'][driver][dest]['arrival_time'] + "<br/>Finish Time : " + routingOutput['solution'][driver][dest]['finish_time'] + "<br/>Fleet : " + driver;
                }
                var aFeature = {
                    "type": "Feature",
                    "geometry": {
                        "type": "Point",
                        "coordinates": routingOutput['solution'][driver][dest]['geocode']
                    },
                    "properties": {
                        "description" : description,
                        "title": dest,
                        "icon": "star"
                    }
                };
                features.push(aFeature);
                coordinates.push(routingOutput['solution'][driver][dest]['geocode']);
            }
        }
        // add source for each driver
        map.addSource(driver, {
            "type": "geojson",
            "data": {
                "type": "Feature",
                "geometry": {
                    "type": "LineString",
                    "coordinates": coordinates
                }
            }
        });
        map.addSource(driver + "points", {
            "type": "geojson",
            "data": {
                "type": "FeatureCollection",
                "features": features
            }
        });

        map.addLayer({
            "id": driver,
            "type": "line",
            "source": driver,
            "layout": {
                'visibility': 'none',
                "line-join": "bevel",
                "line-cap": "round"
            },
            "paint": {
                "line-color": colors[idx],
                "line-width": 2
            }
        });

        map.addLayer({
            "id": driver + "points",
            "type": "symbol",
            "source": driver + "points",
            "layout": {
                'visibility': 'none',
                "icon-image": "{icon}-15",
                "icon-allow-overlap": true,
                "text-field": "{title}",
                "text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
                "text-offset": [0, 0.6],
                "text-anchor": "top"
            }
        });
        idx += 1;
    }

    // Populate the menu to enable/disable the layers
    for (var i = 1; i <= routeLayerIds.length; i++) {
        var link = document.createElement('a');
        link.href = 'Driver_' + i;
        link.className = '';
        link.textContent = "Driver " + i;

        link.onclick = function (e) {
            var clickedLayer = this.getAttribute("href");
            e.preventDefault();
            e.stopPropagation();

            var visibility = map.getLayoutProperty(clickedLayer, 'visibility');

            if (visibility === 'visible') {
                map.setLayoutProperty(clickedLayer, 'visibility', 'none');
                map.setLayoutProperty(clickedLayer + "points", 'visibility', 'none');
                this.className = '';
            } else {
                this.className = 'active';
                map.setLayoutProperty(clickedLayer, 'visibility', 'visible');
                map.setLayoutProperty(clickedLayer + "points", 'visibility', 'visible');
            }
        };

        var layers = document.getElementById('menu');
        layers.appendChild(link);
    }
});

// Show information when mouse hovers to certains delivery point
var popup = new mapboxgl.Popup({
    closeButton: false,
    closeOnClick: false
});

// Use the same approach as above to indicate that the symbols are clickable
// by changing the cursor style to 'pointer'.
map.on('mousemove', function (e) {
    var features = map.queryRenderedFeatures(e.point, { layers: pointLayerIds });
    // Change the cursor style as a UI indicator.
    map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';

    if (!features.length) {
        popup.remove();
        return;
    }

    var feature = features[0];

    // Populate the popup and set its coordinates
    // based on the feature found.
    popup.setLngLat(feature.geometry.coordinates)
        .setHTML(feature.properties.description)
        .addTo(map);
});

</script>

</body>
</html>
